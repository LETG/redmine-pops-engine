<%= render :layout => 'layouts/file' do %>

  <% kind = if @attachment.is_video?
       'video'
     elsif @attachment.is_audio?
       'audio'
     end %>

  <script type="text/javascript">
    $( document ).ready(function() {
      $('#preview_frame').load(function() {
          $('#ajax-indicator').hide();
      });
    });
  </script>

  <% if @attachment.respond_to?(:preview_convertible?) && @attachment.preview_convertible? %>
    <style>
      #preview_pane {
        padding-top: 0 !important;
      }
      #preview_pane > object, #preview_pane > iframe {
        width: 100% !important;
        height: calc(100vh - 200px) !important;
      }
      span.pagination.filepreview {
        margin: 0 !important;
      }
    </style>

    <%- reloadpath = url_for(
      :controller    => "attachments",
      :action        => 'show',
      :id            => @attachment.id,
      :reload        => 1)
    %>
    <div>
      <p class="contextual">
        <%= link_to l(:button_update), reloadpath, :class => "icon icon-reload" %>
        <%= call_hook(:preview_attachment_contextual, :attachment => @attachment, :project => @project ) %>
      </p>
    </div>
    
    <%- case RedmineMorePreviews::Converter.conversion_ext(@attachment.diskfile) %>
    <%- when "inline" %>
      <div id="preview_repository_entry_top">
        <%= call_hook(:preview_attachment_top, :attachment => @attachment, :project => @project, :params => request.query_parameters.merge(:format => "inline", :request => request).symbolize_keys ) %>
      </div>
      <div>
      <% if RedmineMorePreviews::Converter.cache_previews? %>
        <%= @attachment.more_preview( request.query_parameters.merge(:format => "inline", :request => request).symbolize_keys ).to_utf8.html_safe %>
      <% else %>
        <%  @attachment.more_preview( request.query_parameters.merge(:format => "inline", :request => request).symbolize_keys ) do |html| %>
          <%= html.to_utf8.html_safe %>
        <% end %>
      <% end %>
      </div>
    <%- when "jpg", "jpeg", "png", "gif" %>
      <div id="preview_repository_entry_top">
        <%= call_hook(:preview_attachment_top, :attachment => @attachment, :project => @project, :params => request.query_parameters.merge(:request => request).symbolize_keys ) %>
      </div>
      <div>
      <%= image_tag(
            ::Setting['plugin_redmine_more_previews']['absolute'].to_i > 0 ?
            more_preview_url(
              @attachment, 
              RedmineMorePreviews::Converter.conversion_ext(@attachment.diskfile), 
              request.query_parameters
            ) :
            more_preview_path(
              @attachment, 
              RedmineMorePreviews::Converter.conversion_ext(@attachment.diskfile), 
              request.query_parameters
            ), 
            :alt => @attachment.filename,
            :style => "max-width:95%"
          ) %>
      </div>
    <%- else %>
      <div id="preview_repository_entry_top">
        <%= call_hook(:preview_attachment_top, :attachment => @attachment, :project => @project, :params => request.query_parameters.merge(:request => request).symbolize_keys ) %>
      </div>
      <div>
      <%= more_previews_tag(
            ::Setting['plugin_redmine_more_previews']['absolute'].to_i > 0 ?
            more_preview_url(
              @attachment, 
              RedmineMorePreviews::Converter.conversion_ext(@attachment.diskfile), 
              request.query_parameters
            ) :
            more_preview_path(
              @attachment, 
              RedmineMorePreviews::Converter.conversion_ext(@attachment.diskfile), 
              request.query_parameters
            ), 
            @attachment.filename,
            :type => RedmineMorePreviews::Converter.conversion_mime(@attachment.diskfile)
          ) %>
      </div>
    <% end %>
  <% else %>
    <%= render :partial => "common/other",
              :locals => {
                :kind => kind,
                :path => download_named_attachment_url(@attachment,
                                                        @attachment.filename),
                :download_link => link_to_attachment(
                                    @attachment,
                                    :text => l(:label_no_preview_download),
                                    :download => true,
                                    :class => 'icon icon-download'
                                  )
              } %>
  <% end %>
<% end %>
